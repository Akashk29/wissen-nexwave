


syntax


-----------------------------------------------------------
1. java-project
-----------------------------------------------------------


 proj
    |
    |-----p1 ( .java / .class )
    |  | 
    |  |------p11
    |
    |-----p2
    |   
    |   

------------------------------------------------------------



-----------------------------------------------------------
2. java-file
-----------------------------------------------------------

PublicType.java
-------------------------------------------------------------
| a. package declaration ( 1 )
|
| b. import statements ( n )
|
| c. public type ( class | interface | enum | annotation ) ( 1 )
|
| d. default types ( n )
|
|--------------------------------------------------------------




-----------------------------------------------------------
3. package declaration
-----------------------------------------------------------
    => grouping related java-files as one-module ( package )

why we need package-declaration ?

    => easy to maintain
    => we can avoid type-name collisions

syntax:

    package root;
            root.sub1.sub2;

    general recommendation for packgae names

    e.g Employee.java ==> emp ==> EM ==> wissen ==> com

    syntax : c-type.c-name.p-name.m-name;

    package com.wissen.em.emp;        




-----------------------------------------------------------
4. import statement
-----------------------------------------------------------

 ==> to refer types from differet packages

 e.g project

    proj
    |
    |
    |---- p1 ( A.java , B.java )
    |
    |---- p2 ( C.java , D.java )
    |  |
    |  |--p21( F.java )
    |
    |---- p3 ( C.java , E.java )
    |  
    |
    |


    e.g

        package p1;
        import p2.C; // option-2
        import p2.D;
        // or
        import p2.*;
        import p2.p21.F;
        import p3.E;
        public class A{
            B b;
            p2.C c1; // option-1
            C c2;
            D d;
            E e;
            F f;
        }



-----------------------------------------------------------
 OO introduction
-----------------------------------------------------------

what is object ?

       - data,info,props,attributes -> State
       - function,method,work,oprn  -> Behavior
       - adddress,reference,location-> Identity

       i.e object  ==> SBI

---------------------------------------------------------
    class  ==> inatnace(s)
---------------------------------------------------------        
OO concepts
-----------

    - Abstraction / Interface
        why we need ?
            => easy to use/learn by dependent-object
            => loose-coupling b/w dependent & dependency

    - Encapsulation / Implementation
        why we need ?
            => real-functionality or Implementation
            => hiding complex Implementation thru Abstraction

    - Inheritance
        why we need?
            => re-using common state & Behavior
               from genaralized-type to specialized-type objects

    - polymorphism
        - a object should react in differet way based on input-strategy
        why we need?
            => can make more re-usable objects
               i.e object can be closed for modification & open for extension

------------------------------------------------------------------------



-----------------------------------------------------------
 Type : class-syntax 
-----------------------------------------------------------


_____   _________ class Name [extends] Super-Type 
[public][abstract]           [implements] I1,I2,..{
[      ][final]     // state-definition  ==> variables
        [strictfp]  // constructor(s)
                    // behavior(s)
                    // inner-blocks ( static | instance)
                    // inner-types
________________
[public] [static]
[private]
[protected]
[       ]
                }
------------------------------------------------------------


-----------------------------------------------------------
 Type : interface-syntax 
-----------------------------------------------------------


==> to abstract our obj's Implementation

________    interface Name [extends] I1,I2,I3,..{
[public]    // constant-state ==> constant variables ( public & static & final )
[      ]    // behvaior       ==> abstract-behav     ( public & abstract)
            // inner type(s)

            in java-8
            -------------
            default void m1(){}
            static void m2(){}

            in java-9
            ------------
            private void priMethod(){}

           }


-----------------------------------------------------------
 Type : enum-syntax  ( in java 1.5 )
-----------------------------------------------------------

==> to group related constants as Type  

syntax

    enum Name [implemnts] I1,I2{
        // constants ==> ( instances of this enum-type) ==> public & static
        // constructor(s)
        // method(s)
    }
           
-----------------------------------------------------------
 Type : annotation-syntax  ( in java 1.5 )
-----------------------------------------------------------

 ==> to describe java programming elements


syntax:

        @interface Name{
            //properties ==> public & abstract
        }

-----------------------------------------------------------

   
-----------------------------------------------------------
syntax:  variable(s)
-----------------------------------------------------------


data-types

    1. simple  / primitives ==> values    i.e 8 primitives
    2. complex / references ==> objects   ==> user defined data-types


    e.g

    class Employee{
        static String tnrName; // class's variable
        int id; // obj's variable
        void m(){
            int loc;
        }
    }

syntax
   ________    __________ data-type varName=[value/obj's referenc]
   [public]    [static]
   [private]   [final ]
   [protected] [transient]
   [      ]    [volatile]

     local-variables
   ------------------------
    -Nil-       [final]    

  

   
-----------------------------------------------------------
syntax:  constructor(s)
-----------------------------------------------------------
in java,

    => obj creations 2-steps process


step-1 : dyanmic memory allocation   ==> 'new'
step-2 : initialize that memory with obj's values ==> constructor


syntax :

    in any class,


        ______     ClassName([args]){
        [public]     // initialization logic..
        [private]   
        [protected]
        [         ]

                    }   

-----------------------------------------------------------
syntax:  method  ==> behavior
-----------------------------------------------------------
    ReturnType
        - void
        - primitive/reference

______      ________ ReturnType methodName([args])[throws] Exception{
[public]    [static]           // A/R/L & assignment operation
[private]   [final]            // conditional executions
[protected] [synchronized]     // looping executions
[      ]    [strictfp]         // invoke other methods
            [abstract]              [return][result]
            [native]        }
-----------------------------------------------------------

Naming conventions
-------------------

 keywords      ==> lower-case
 package-names ==> lower-case
 type-names    ==> pascal-case  e.g JavaEmployee
 field/method  ==> camel-case   e.h javaEmployee
 constants     ==> upper-case

------------------------------------------------------------ 


